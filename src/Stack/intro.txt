Stack : Last In First Out

Syntax: Stack <Integer> st =  new Stack<>();

Operations :                               Time Complexity

st.push(10) -> add in stack                   //TC:O(1)

st.pop() -> remove top form stack and return  //TC:O(1)

st.peek() -> tell you the topmost element     //TC:O(1)

st.size() -> no. of element in stack          //TC:O(1)

|      |
|      |
|  40  |
|  30  |      -> Stack
|  20  |
|  10  |
--------

Stack Real World Examples
1. Pile of plate
2. undo/redo
3. Bangles in hand


LinkedList Real World Examples
1. LRU Cache
_______________________________________________________

LinkedList as Stack

given LL :  10 -> 20 -> 30 -> 40 -> 50

add 60
10 -> 20 -> 30 -> 40 -> 50 -> 60
add 70
10 -> 20 -> 30 -> 40 -> 50 -> 60 -> 70
add 80
10 -> 20 -> 30 -> 40 -> 50 -> 60 -> 70 -> 80
remove {pop()}
10 -> 20 -> 30 -> 40 -> 50 -> 60 -> 70
remove {pop()}
10 -> 20 -> 30 -> 40 -> 50 -> 60

Time Complexity :
add Last : O(n)
remove Last : O(n)


The Optimal way to achieve this is,

given LL :  10 -> 20 -> 30 -> 40 -> 50

add 60
60 -> 10 -> 20 -> 30 -> 40 -> 50
add 70
70 ->60 -> 10 -> 20 -> 30 -> 40 -> 50
add 80
80 -> 70 -> 60 -> 10 -> 20 -> 30 -> 40 -> 50
remove {pop()}
70 -> 60 -> 10 -> 20 -> 30 -> 40 -> 50
remove {pop()}
60 -> 10 -> 20 -> 30 -> 40 -> 50
remove {pop()}
10 -> 20 -> 30 -> 40 -> 50

It is also same as stack LIFO. as,
60, 70, 80 add then
80, 70, 60 remove, in LIFO manner

But The Time Complexity is:
add first : O(1)
remove first : O(1)

