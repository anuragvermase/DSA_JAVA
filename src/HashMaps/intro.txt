HashMaps : HashMap in Java stores the data in (Key, Value) pairs, and you can access them by an index of another type (e.g. an Integer).
One object is used as a key (index) to another object (value). If you try to insert the duplicate key in HashMap, it will replace
the element of the corresponding key.

(Key, Value) pair

=> Store population of every country:
   Key : Country name : String
   value : population : int/long

=> Store all the school with their principal name.
   Key : String
   value : String
____________________________________________________________
Facts :
1. Keys can be only of following data type:

           wrapper class

boolean -> Boolean
int     -> Integer
long    -> Long
char    -> Character
double  -> Double
String  -> String

Not application : arrays, objects.

2. Values can be of any type
___________________________________________________________

Syntax:
            key     value    name
=> HashMap <Integer,Integer> hm   = new HashMap<>();

//ADD
hm.put(10,50);
hm.put(20,60);
hm.put(30,60);
hm.put(20,70); -> replace last value(60) in that key
Time complexity : O(1)

 _keys___Values_
| 10      50   |
| 20      70   |
| 30      60   |
 _______________

//GET
hm.get(20); -> 70
hm.get(40); -> null

Time complexity : O(1)

//containsKey-> check if key exists
hm.containsKey(20); -> True
hm.containsKey(40); -> False

Time complexity : O(1)

//remove
hm.remove(10); -> it will remove(10,50)
T.C. ->O(1)

//Size
hm.size() -> give no of keys

//Iterate on HashMap

 //print key
 for (int key: hm.keySet()) {
 System.out.println(key);
 }

 //print value
 for (int value: hm.values()) {
 System.out.println(value);
 }

___________________________________________________________

HashSet
-> Only the key part of HashMap

HashSet<Integer> hs = new HashSet<>(); (random order)

//add
hs.add(10); -> add
hs.add(20); -> add
hs.add(10); -> Nothing(replace previous 10)

//remove
hs.remove(10); -> removes 10

//contains
hs.contains(20); -> true
hs.contains(10); -> false

//size
hs.size(); -> 1




