Classes and Objects :

Classes: To combine different data types and data structures.

Need of creating classes:
-> When we are creating custom data types.

Creating Class:

public static class Pair{
int x;
int y;
}

Creating object:

Pair p1 = new Pair();
Pair p2 = new Pair();
Pair p3 = new Pair();

***NOTE : Integers predefined value is zero (0).
          String predefined value is empty string ("")
          boolean predefined value is false
eg: if int x;  {x=0}
    if String color; {color = ""}
    if boolean pool; {pool = false}

p1,p2,p3: are independent.
all have there x and y.

let, System.out.println(p2.y); //0 {default value of integer is zero(0)}
p2.y = 50;
System.out.println(p2.y); //50
_____________________________________________________________________________
Class: It is a blueprint.
Object: real instance of blueprint


BLUEPRINT           Shazzy :                      Chandra :
class home{         home Shazzy = new home()      home chandra = new home()
int roomCount;      shazzy.roomCount=4            chandra.roomCount=3
int floorCount;     shazzy.floorCount=2           chandra.floorCount=4
int area;           shazzy.area = 500             chandra.area = 600
String color;       shazzy.color = "blue"         chandra.color = "yellow"
boolean pool;       shazzy.pool = true            chandra.pool = false
}

________________________________________________________________________________________

Constructor: to make your life easy

without constructor:
public static class Pair{
int x;
int y;
}

if we want to assign values to x & y:
Pair p1 =new Pair();
p1.x = 20;
p1.y = 20;
________________________________________

with constructor:
public static class Pair{
int x;
int y;

//constructor with two parameter
Pair(int v1,int v2){     //constructor {we can create multiple constructor}
x = v1
y = v2
}

//constructor with one parameter
Pair(int v1){
x = v1
}

}

if we created the constructor, then we have to pass the value in pair(); otherwise it throws error.

if we want to assign values to x & y:
Pair p1 =new Pair(20,20);  //not write extra line of code to assign values

____________________________________________________________________________________

Nested Class:

let int x = "Great";
Pair p1 = 10;                   //Pair is a Class
{So, while assigning , type should bhi same}

**nested class**
-----------------
class Node{
int val;
Node next;

Node (int v1){
val = v1
}
}

objects:

Node n1 = new Node(10);
i.e
________________
n1:
int val = 10;
Node next = null;
________________

Node n2 = new Node(20);
i.e
________________
n2:
int val = 20;
Node next = null;
________________

NOW,
n1.next = n2
it means, n1's next becomes n2
________________
n1:
int val = 10;
Node next = n2;
________________
print(n1.next.val) //20 {we can access n2's value through n1}

creating 3rd object
Node n3 = new Node(30);
i.e
________________
n3:
int val = 30;
Node next = null;
________________

print(n2.val) //20
print(n2.next.next) //null {n2.next means next of n2, n2.next.next means next of n3}
print(n1.next.next.val) //30 {val of n3}
print(n1.next) // reference of n2
_______________________
Node n0 = new Node();
when we created a variable(n0) with new keyword computer assign a name to that variable also,
let it be reference(#ref0) {random values or hashcode}
user's given name :n0
computer given name :#ref0
so, follow this condition n1, n2, n3 have their reference value let it be :#ref1, #ref2, #ref3.

________________________________________________________________________________________________
NOW,

 head
val =10          val =20           val =30             val=40              val=50
next=#ref2   ->  next=#ref3   ->   next=#ref4    ->    next=#ref5    ->    next=null

#ref1            #ref2             #ref3               #ref4               #ref5

print (head.val) -> 10
print (head.next.val) -> 20
print (head.next.next.next) -> #ref4

this is noting but Linked list : A Nested Class whose many occurrences connected to each other and
we know the name of first occurrence.